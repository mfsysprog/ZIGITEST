/* rexx */
   localrep = ''
   zigirep = 'tmp'
   encoding = 'ibm-1047'
   ver = 'zigitag'
   cmd = 'ls' localrep'/'zigirep'/.gitattributes'
   x = bpxwunix(cmd,,so.,se.)
/* already there */
   call syscalls 'ON'
   address syscall
   if so.0 = 1 then
   /* lets remove it for now */
   'unlink 'path
   path = localrep"/"zigirep"/.gitattributes"
   'open' path,
     O_rdwr+O_creat+O_trunc,
     660
   if retval = -1 then exit 8
   fd = retval  /* as I think it's weird to write to a retval lol */
   call setup_iconv
/* we replace the default pipe write end of iconv_stdout.2 with */
/* the fd filedescriptor, so our iconv we spawn next will write */
/* directly to the file we opened before which has fd as its    */
/* file descriptor                                              */
/* just as a test to see if we can have a generic setup for     */
/* iconv that we can 'bend' later                               */
   'dup2' fd iconv_stdout.2
   'spawn /bin/iconv 'parms.0' map. parms. env.'
   pid = retval
/* for this write we want to write to the stdin for the iconv process */
   fd_out = iconv_stdin.2
   call write ,
     "# This .gitattributes file is autogenerated with zigi" ver
   call write ,
     "*   git-encoding=iso8859-1 zos-working-tree-encoding="encoding
   ga3a = ".gitattributes    "
   ga3b = "git-encoding=iso8859-1 zos-working-tree-encoding=iso8859-1"
   ga3  = ga3a || ga3b
   call write ga3
   ga4a = ".gitignore        "
   ga4b = "git-encoding=iso8859-1 zos-working-tree-encoding=iso8859-1"
   ga4  = ga4a || ga4b
   call write ga4
   binaries = '*.docm *.docx *.doc *.dotx *.pdf *.epub *.mobi *.azw3' ,
     '*.jpg *.jpeg *.png *.gif *.zip *.gzip *.tz *.z *.Z *.pax' ,
     '*.ppt *.pptx *.xls *.xlsx *.xlsm *.obj *.bin'
   do gai = 1 to words(binaries)
      ga = word(binaries,gai) 'binary'
      call write ga
   end
   'close' fd
/* closing the write end of the iconv_stdin will act as EOF */
   'close' iconv_stdin.2

   call syscalls 'OFF'

/* tag it and bag it */
   cmd = 'cd 'localrep'/'zigirep' && '
   cmd = cmd 'chtag -tc iso8859-1 .gitattributes'
   x = bpxwunix(cmd,,so.,se.)

/* lets see if we can remove this string from our file */
   remove_string = '*.mobi binary'

/* this does require autoconvert to be on */
   env.0 = 1
   env.1 = "_BPXK_AUTOCVT=ON"
/* this uses the ex command to do a g(lobal) d(elete) of the remove_string */
/* after which we w(rite) and q(uit).                                      */
/* perhaps sed -i would have been nicer, but omvs doesn't have the -i flag */
   cmd = 'ex -s +"g/'remove_string'/d|w|q" 'localrep'/'zigirep'/.gitattributes'
   x = bpxwunix(cmd,,so.,se.,env.)

/* Create the .zigi folder in the repo and add the dsn-file */
   cmd = 'cd 'localrep'/'zigirep' && mkdir .zigi'
   x = bpxwunix(cmd,,so.se.)

/* Fill dsn file with the comments */
   path = localrep"/"zigirep"/.zigi/dsn"
   'open' path,
     O_rdwr+O_creat+O_trunc,
     660
   if retval = -1 then do
      Address ISPExec
      zs1 = "Something bad when creating .zigi/dsn."
      zs4 = 'Press F3 to close this popup and exit.'
      parse value '' with zs2 zs3
      call do_popup4
      return
   end
   fd = retval  /* as I think it's weird to write to a retval lol */
/* for this write we want to write to the fd directly */
   fd_out = fd
   call write "# zigi dsn-file"
   call write "# This file needs to be here."
   call write "# Don't edit unless you know what you're doing :)"
   call write '#  '
   call write '# record format is (case insensitive):'
   call write '#  '
   call write '# Position - description'
   call write '#  '
   call write '# 1 - directory name which will be prefixed by the'
   call write '#     defined HLQ to create the z/OS dataset'
   call write '#     (* defines the default)'
   call write '# 2 - PS or PO (dataset organization)'
   call write '#     PS for a flat file'
   call write '#     PO for a directory and thus a partitioned dataset'
   call write '# 3 - record format (FB or VB)'
   call write '# 4 - lrecl'
   call write '# 5 - blksize'
   call write '#     0 is allowed if system determined blksize is enabled'
   call write '# 6 - extension (optional - if used then no period)'
   call write '#     file extension to be used for PDS members in USS'
   call write '#  '
   call write '# Default DSORG and DCB info'
   call write '* PO FB 80 32720'
   'close' fd
   exit 0

setup_iconv:
  /* first create some pipes for our iconv process */
   address syscall "pipe iconv_stdin."
   address syscall "pipe iconv_stdout."
   address syscall "pipe iconv_stderr."
  /* set environment */
   env.0 = 1
   env.1 = "_BPX_SHAREAS=MUST"
  /* map our pipes for iconv process */
  /* each pipe has a read end (the .1 stem) and a write end (the .2 stem) */
  /* so the stdin for iconv (map.0) will read for iconv_stdin */
  /* and will write to fd and possibly iconv_stderr */
   map.0 = iconv_stdin.1
   map.1 = iconv_stdout.2
   map.2 = iconv_stderr.2
  /* iconv has 5 parms, the first being the command itself */
   parms.0 = 5
   parms.1 = "iconv"
   parms.2 = "-f"
   parms.3 = "ibm-1047"
   parms.4 = "-t"
   parms.5 = "iso8859-1"
   return

write:
   parse arg string
   string = string || ESC_R || ESC_N
   'write' fd_out 'string' length(string)
   return

